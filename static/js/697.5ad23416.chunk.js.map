{"version":3,"file":"static/js/697.5ad23416.chunk.js","mappings":"2OAmHA,UA1GsB,WACpB,OAAoBA,EAAAA,EAAAA,KAAbC,GAAP,eACA,GAA8CC,EAAAA,EAAAA,UAAS,IAAvD,eAAOC,EAAP,KAAwBC,EAAxB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAAoCJ,EAAAA,EAAAA,UAAS,IAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KACA,GAAoCN,EAAAA,EAAAA,UAAS,IAA7C,eAAOO,EAAP,KAAmBC,EAAnB,KACA,GAAsCR,EAAAA,EAAAA,UAAS,IAA/C,eAAOS,EAAP,KAAoBC,EAApB,KACA,GAAkCV,EAAAA,EAAAA,UAAS,IAA3C,eAAOW,EAAP,KAAkBC,EAAlB,KACA,GAAkCZ,EAAAA,EAAAA,WAAS,GAA3C,eAAOa,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GAEb,IAAME,EAAmB,mCAAG,wGAElBC,EAAWlB,EAAUmB,KAAI,SAAAC,GAAE,OAAIC,EAAAA,EAAAA,GAAkBD,EAAtB,IAFT,SAIAE,QAAQC,IAAIL,GAJZ,OAIlBM,EAJkB,OAMlBC,EAAcD,EAAUL,KAAI,SAAAO,GAAQ,OAAIA,EAASC,IAAb,IAE1CxB,EAAmBsB,GACnBpB,EAAiBoB,GATO,kDAWxBG,QAAQC,IAAR,MAXwB,yBAaxBd,GAAa,GACbe,EAAAA,QAAAA,SAdwB,6EAAH,qDAiBzBb,GACD,GAAE,CAACjB,IAgDJ,OACE,+BACE,UAAC,IAAD,WACGc,GAAagB,EAAAA,QAAAA,UACZ9B,EAAU+B,SACV,SAAC,IAAD,CAASC,KAAK,0CAEfhC,EAAU+B,OAAS,IAClB,iCACE,SAAC,IAAD,CACEJ,KAAMzB,EACN+B,aAhCS,SAAAC,GACnBA,EAAIC,iBAEJ,IAAMC,EAAYlC,EACfmC,QAAO,qBAAGC,KAAgBC,SAASjC,EAA5B,IACP+B,QAAO,qBAAGG,YAA8BD,SAAS/B,EAA1C,IAEVH,EAAiB+B,GACjBR,QAAQC,IAAI,CAAEvB,WAAAA,EAAYE,WAAAA,EAAYE,YAAAA,EAAaE,UAAAA,IACnDgB,QAAQC,IAAIO,EACb,EAuBWK,YA1DQ,SAAAP,GAClB,MAAwBA,EAAIQ,OAApBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,aACHpC,EAAcqC,GACd,MAEF,IAAK,aACHnC,EAAcmC,GACd,MAEF,IAAK,iBACHjC,EAAeiC,GACf,MAEF,IAAK,eACH/B,EAAa+B,GAMlB,EAoCWC,aAtBS,WACnBtC,EAAc,IACdE,EAAc,IACdE,EAAe,IACfE,EAAa,IACbR,EAAiBH,GACjB0B,QAAQC,IAAI,CAAEvB,WAAAA,EAAYE,WAAAA,EAAYE,YAAAA,EAAaE,UAAAA,GACpD,EAgBWF,YAAaA,EACbE,UAAWA,KAEXR,EAAc2B,SACd,SAAC,IAAD,CAASC,KAAK,wDAEhB,SAAC,IAAD,CAAaL,KAAMvB,WAM9B,C","sources":["pages/FavoritesPage.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getCatalogCarById } from 'api/operations';\nimport { Section } from 'components/Section/Section';\nimport { CatalogList } from 'components/CatalogList/CatalogList';\nimport { Message } from 'components/Message/Message';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { useFavorites } from 'hooks/useFavorites';\nimport { FilterCar } from 'components/FilterCar/FilterCar';\n\nconst FavoritesPage = () => {\n  const [favorites] = useFavorites();\n  const [dataFavoriteCar, setDataFavoriteCar] = useState([]);\n  const [filterCatalog, setFilterCatalog] = useState([]);\n  const [inputBrand, setInputBrand] = useState('');\n  const [inputPrice, setInputPrice] = useState('');\n  const [mileageFrom, setMileageFrom] = useState('');\n  const [mileageTo, setMileageTo] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    const catalogFavoriteCars = async () => {\n      try {\n        const promises = favorites.map(id => getCatalogCarById(id));\n\n        const responses = await Promise.all(promises);\n\n        const favoriteCar = responses.map(response => response.data);\n\n        setDataFavoriteCar(favoriteCar);\n        setFilterCatalog(favoriteCar);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n        Loading.remove();\n      }\n    };\n    catalogFavoriteCars();\n  }, [favorites]);\n\n  const handleCange = evt => {\n    const { name, value } = evt.target;\n\n    switch (name) {\n      case 'inputBrand':\n        setInputBrand(value);\n        break;\n\n      case 'inputPrice':\n        setInputPrice(value);\n        break;\n\n      case 'carMileageFrom':\n        setMileageFrom(value);\n        break;\n\n      case 'carMileageTo':\n        setMileageTo(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const filterCar = dataFavoriteCar\n      .filter(({ make }) => make.includes(inputBrand))\n      .filter(({ rentalPrice }) => rentalPrice.includes(inputPrice));\n\n    setFilterCatalog(filterCar);\n    console.log({ inputBrand, inputPrice, mileageFrom, mileageTo });\n    console.log(filterCar);\n  };\n\n  const resetFilters = () => {\n    setInputBrand('');\n    setInputPrice('');\n    setMileageFrom('');\n    setMileageTo('');\n    setFilterCatalog(dataFavoriteCar);\n    console.log({ inputBrand, inputPrice, mileageFrom, mileageTo });\n  };\n\n  return (\n    <>\n      <Section>\n        {isLoading && Loading.arrows()}\n        {!favorites.length && (\n          <Message text=\"You don't have any favorite cars yet!\" />\n        )}\n        {favorites.length > 0 && (\n          <>\n            <FilterCar\n              data={dataFavoriteCar}\n              handleSubmit={handleSubmit}\n              handleCange={handleCange}\n              resetFilters={resetFilters}\n              mileageFrom={mileageFrom}\n              mileageTo={mileageTo}\n            />\n            {!filterCatalog.length && (\n              <Message text=\"Sorry, there are no machines with such parameters!\" />\n            )}\n            <CatalogList data={filterCatalog} />\n          </>\n        )}\n      </Section>\n    </>\n  );\n};\nexport default FavoritesPage;\n"],"names":["useFavorites","favorites","useState","dataFavoriteCar","setDataFavoriteCar","filterCatalog","setFilterCatalog","inputBrand","setInputBrand","inputPrice","setInputPrice","mileageFrom","setMileageFrom","mileageTo","setMileageTo","isLoading","setIsLoading","useEffect","catalogFavoriteCars","promises","map","id","getCatalogCarById","Promise","all","responses","favoriteCar","response","data","console","log","Loading","length","text","handleSubmit","evt","preventDefault","filterCar","filter","make","includes","rentalPrice","handleCange","target","name","value","resetFilters"],"sourceRoot":""}