{"version":3,"file":"static/js/697.8c776ea0.chunk.js","mappings":"6PAsJA,UAvIsB,WACpB,OAAoBA,EAAAA,EAAAA,KAAbC,GAAP,eACA,GAA8CC,EAAAA,EAAAA,UAAS,IAAvD,eAAOC,EAAP,KAAwBC,EAAxB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAAoCJ,EAAAA,EAAAA,UAAS,IAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KACA,GAAoCN,EAAAA,EAAAA,UAAS,IAA7C,eAAOO,EAAP,KAAmBC,EAAnB,KACA,GAAsCR,EAAAA,EAAAA,UAAS,IAA/C,eAAOS,EAAP,KAAoBC,EAApB,KACA,GAAkCV,EAAAA,EAAAA,UAAS,IAA3C,eAAOW,EAAP,KAAkBC,EAAlB,KACA,GAAkCZ,EAAAA,EAAAA,WAAS,GAA3C,eAAOa,EAAP,KAAkBC,EAAlB,KACMC,GAA8BC,EAAAA,EAAAA,QAAO,MACrCC,GAA8BD,EAAAA,EAAAA,QAAO,OAE3CE,EAAAA,EAAAA,YAAU,WACRJ,GAAa,GAEb,IAAMK,EAAmB,mCAAG,wGAElBC,EAAWrB,EAAUsB,KAAI,SAAAC,GAAE,OAAIC,EAAAA,EAAAA,GAAkBD,EAAtB,IAFT,SAIAE,QAAQC,IAAIL,GAJZ,OAIlBM,EAJkB,OAMlBC,EAAcD,EAAUL,KAAI,SAAAO,GAAQ,OAAIA,EAASC,IAAb,IAE1C3B,EAAmByB,GACnBvB,EAAiBuB,GATO,kDAWxBG,QAAQC,IAAR,MAXwB,yBAaxBjB,GAAa,GACbkB,EAAAA,QAAAA,SAdwB,6EAAH,qDAiBzBb,GACD,GAAE,CAACpB,IAEJ,IAyBMkC,GAAgBC,EAAAA,EAAAA,IAAcjC,EAAiBI,GAE/C8B,GAAiBC,EAAAA,EAAAA,IAAeH,EAAe1B,GAE/C8B,GAAmBC,EAAAA,EAAAA,IACvBH,EACA1B,EACAE,GAGI4B,GAA0BD,EAAAA,EAAAA,IAC9BL,EACAxB,EACAE,GAiCF,OACE,+BACE,UAAC,IAAD,WACGE,GAAamB,EAAAA,QAAAA,UACZjC,EAAUyC,SACV,SAAC,IAAD,CAASC,KAAK,0CAEf1C,EAAUyC,OAAS,IAClB,iCACE,SAAC,IAAD,CACEX,KAAM5B,EACNyC,aAzCS,SAAAC,GACnBA,EAAIC,iBAGFxC,GADGG,IAAeE,IAAgBE,GACjBsB,EAId1B,EAKAE,GAAgBE,EAKJ0B,EAJEF,EALAI,EAUpB,EAuBWM,aAnFS,SAAAF,GACnB,MAAwBA,EAAIG,OAApBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,aACHzC,EAAc0C,GACd,MAEF,IAAK,aACHxC,EAAcwC,GACd,MAEF,IAAK,iBACHtC,EAAesC,GACf,MAEF,IAAK,eACHpC,EAAaoC,GAMlB,EA6DWC,aAtBS,WACnB3C,EAAc,IACdE,EAAc,IACdE,EAAe,IACfE,EAAa,KACbsC,EAAAA,EAAAA,GAAYnC,EAA6BE,GACzCb,EAAiBH,EAClB,EAgBWQ,YAAaA,EACbE,UAAWA,EACXwC,oBAAqBpC,EACrBqC,oBAAqBnC,KAErBd,EAAcqC,SACd,SAAC,IAAD,CAASC,KAAK,wDAEhB,SAAC,IAAD,CAAaZ,KAAM1B,WAM9B,C","sources":["pages/FavoritesPage.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { getCatalogCarById } from 'api/operations';\nimport { Section } from 'components/Section/Section';\nimport { CatalogList } from 'components/CatalogList/CatalogList';\nimport { Message } from 'components/Message/Message';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { useFavorites } from 'hooks/useFavorites';\nimport { FilterCar } from 'components/FilterCar/FilterCar';\nimport { clearSelect } from 'helpers/clearSelect';\nimport {\n  getCarsByMake,\n  getCarsByPrice,\n  getCarsByMileage,\n} from 'helpers/getCars';\n\nconst FavoritesPage = () => {\n  const [favorites] = useFavorites();\n  const [dataFavoriteCar, setDataFavoriteCar] = useState([]);\n  const [filterCatalog, setFilterCatalog] = useState([]);\n  const [inputBrand, setInputBrand] = useState('');\n  const [inputPrice, setInputPrice] = useState('');\n  const [mileageFrom, setMileageFrom] = useState('');\n  const [mileageTo, setMileageTo] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const selectInputBrandRefFavorite = useRef(null);\n  const selectInputPriceRefFavorite = useRef(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    const catalogFavoriteCars = async () => {\n      try {\n        const promises = favorites.map(id => getCatalogCarById(id));\n\n        const responses = await Promise.all(promises);\n\n        const favoriteCar = responses.map(response => response.data);\n\n        setDataFavoriteCar(favoriteCar);\n        setFilterCatalog(favoriteCar);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n        Loading.remove();\n      }\n    };\n    catalogFavoriteCars();\n  }, [favorites]);\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n\n    switch (name) {\n      case 'inputBrand':\n        setInputBrand(value);\n        break;\n\n      case 'inputPrice':\n        setInputPrice(value);\n        break;\n\n      case 'carMileageFrom':\n        setMileageFrom(value);\n        break;\n\n      case 'carMileageTo':\n        setMileageTo(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const filterMakeCar = getCarsByMake(dataFavoriteCar, inputBrand);\n\n  const filterPriceCar = getCarsByPrice(filterMakeCar, inputPrice);\n\n  const filterMileageCar = getCarsByMileage(\n    filterPriceCar,\n    mileageFrom,\n    mileageTo\n  );\n\n  const filterMileageCarNoPrice = getCarsByMileage(\n    filterMakeCar,\n    mileageFrom,\n    mileageTo\n  );\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    if (!inputPrice & (!mileageFrom || !mileageTo)) {\n      setFilterCatalog(filterMakeCar);\n      return;\n    }\n\n    if (!inputPrice) {\n      setFilterCatalog(filterMileageCarNoPrice);\n      return;\n    }\n\n    if (!mileageFrom || !mileageTo) {\n      setFilterCatalog(filterPriceCar);\n      return;\n    }\n\n    setFilterCatalog(filterMileageCar);\n  };\n\n  const resetFilters = () => {\n    setInputBrand('');\n    setInputPrice('');\n    setMileageFrom('');\n    setMileageTo('');\n    clearSelect(selectInputBrandRefFavorite, selectInputPriceRefFavorite);\n    setFilterCatalog(dataFavoriteCar);\n  };\n\n  return (\n    <>\n      <Section>\n        {isLoading && Loading.arrows()}\n        {!favorites.length && (\n          <Message text=\"You don't have any favorite cars yet!\" />\n        )}\n        {favorites.length > 0 && (\n          <>\n            <FilterCar\n              data={dataFavoriteCar}\n              handleSubmit={handleSubmit}\n              handleChange={handleChange}\n              resetFilters={resetFilters}\n              mileageFrom={mileageFrom}\n              mileageTo={mileageTo}\n              selectInputBrandRef={selectInputBrandRefFavorite}\n              selectInputPriceRef={selectInputPriceRefFavorite}\n            />\n            {!filterCatalog.length && (\n              <Message text=\"Sorry, there are no machines with such parameters!\" />\n            )}\n            <CatalogList data={filterCatalog} />\n          </>\n        )}\n      </Section>\n    </>\n  );\n};\nexport default FavoritesPage;\n"],"names":["useFavorites","favorites","useState","dataFavoriteCar","setDataFavoriteCar","filterCatalog","setFilterCatalog","inputBrand","setInputBrand","inputPrice","setInputPrice","mileageFrom","setMileageFrom","mileageTo","setMileageTo","isLoading","setIsLoading","selectInputBrandRefFavorite","useRef","selectInputPriceRefFavorite","useEffect","catalogFavoriteCars","promises","map","id","getCatalogCarById","Promise","all","responses","favoriteCar","response","data","console","log","Loading","filterMakeCar","getCarsByMake","filterPriceCar","getCarsByPrice","filterMileageCar","getCarsByMileage","filterMileageCarNoPrice","length","text","handleSubmit","evt","preventDefault","handleChange","target","name","value","resetFilters","clearSelect","selectInputBrandRef","selectInputPriceRef"],"sourceRoot":""}